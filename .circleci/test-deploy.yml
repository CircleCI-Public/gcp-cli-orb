version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@dev:<<pipeline.git.revision>>
  orb-tools: circleci/orb-tools@11.4

filters: &filters
  tags:
    only: /.*/

post-steps:
  - run: &check-cli-version
      name: "Check if the CLI was installed and the version is correct"
      command: |
        if [ << parameters.version >> = "latest" ]; then
          gcloud version || exit 1
        else
          gcloud --version | grep -q "Google Cloud SDK << parameters.version >>" || exit 1
        fi

  - run: &check-cli-version-alpine
      name: "Check if the CLI was installed and the version is correct"
      command: |
        . $BASH_ENV
        if [ << parameters.version >> = "latest" ]; then
          gcloud version || exit 1
        else
          gcloud --version | grep -q "Google Cloud SDK << parameters.version >>" || exit 1
        fi

  - run: &check-cli-version-bash
      name: "Check if the CLI was installed and the version is correct"
      shell: bash.exe
      command: |
        if [ << parameters.version >> = "latest" ]; then
          gcloud version || exit 1
        else
          gcloud --version | grep -q "Google Cloud SDK << parameters.version >>" || exit 1
        fi

  - run: &check-cli-version-cmd
      name: "Check if the CLI was installed and the version is correct"
      shell: cmd.exe
      command: |
        bash gcloud version

  - run: &check-cli-version-powershell
      name: "Check if the CLI was installed and the version is correct"
      shell: powershell.exe
      command: |
        bash gcloud version

  - run: &check-gcloud-auth-gcr-bash
      name: "Check if the CLI can generate docker configuration json file to pull images from gcr"
      shell: bash.exe
      command: |
        gcloud auth configure-docker --quiet
        test -f /c/Users/circleci/.docker/config.json
        rm /c/Users/circleci/.docker/config.json

  - run: &check-gcloud-auth-gcr-powershell
      name: "Check if the CLI can generate docker configuration json file to pull images from gcr"
      shell: powershell.exe
      command: |
        bash gcloud auth configure-docker --quiet
        Test-Path C:\Users\circleci\.docker\config.json
        rm C:\Users\circleci\.docker\config.json

  - run: &push-and-pull-docker-image
      name: "Builds a Docker image and publishes it to gcr"
      shell: bash.exe
      command: |
        cat \<<EOF > Dockerfile
        FROM alpine:edge
        RUN apk update
        RUN apk add curl
        CMD ["curl", "--version"]
        EOF
        docker build . -t gcr.io/cpe-gcp-orb-testing/gcp-cli-orb-test-image:latest
        gcloud auth configure-docker --quiet
        docker push gcr.io/cpe-gcp-orb-testing/gcp-cli-orb-test-image:latest
        docker image prune -af
        docker pull gcr.io/cpe-gcp-orb-testing/gcp-cli-orb-test-image:latest
        docker image prune -af
        gcloud container images delete gcr.io/cpe-gcp-orb-testing/gcp-cli-orb-test-image:latest --quiet

jobs:
  install:
    parameters:
      executor:
        type: executor
      version:
        type: string
    executor: <<parameters.executor>>
    steps:
      - gcp-cli/install:
          version: <<parameters.version>>
      - run: *check-cli-version

  install-win:
    parameters:
      executor:
        type: executor
      version:
        type: string
    executor: <<parameters.executor>>
    steps:
      - gcp-cli/install:
          version: <<parameters.version>>
      - run: *check-cli-version-bash
      - run: *check-cli-version-cmd
      - run: *check-cli-version-powershell
      - run: *check-gcloud-auth-gcr-bash
      - run: *check-gcloud-auth-gcr-powershell

  install-alpine:
    parameters:
      version:
        type: string
    executor: "alpine"
    steps:
      - run:
          name: Install curl
          command: apk add curl
      - gcp-cli/install:
          version: << parameters.version >>
      - run: *check-cli-version-alpine

  install-google:
    parameters:
      version:
        type: string
    executor: "gcp-cli/google"
    steps:
      - run:
          name: Install sudo
          command: apt-get install sudo -y
      - gcp-cli/install:
          version: << parameters.version >>
      - run: *check-cli-version

  install-components:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - checkout
      - gcp-cli/setup:
          components: kubectl package-go-module # smallest not install gcloud components
      - run: gcloud components list | grep package-go-module || exit 1
      - run: *push-and-pull-docker-image

  auth-oidc:
    parameters:
      executor:
        type: executor
    executor: <<parameters.executor>>
    steps:
      - checkout
      - gcp-cli/setup:
          use_oidc: true
      - run: *check-cli-version
      - run: *push-and-pull-docker-image

executors:
  alpine:
    docker:
      - image: python:3.8-alpine
  windows-2019:
    machine:
      resource_class: windows.medium
      image: windows-server-2019-vs2019:current
  windows-2022:
    machine:
      resource_class: windows.medium
      image: windows-server-2022-gui:current
  ubuntu-2204-edge:
    machine:
      image: ubuntu-2204:edge

workflows:
  test-deploy:
    jobs:
      - install:
          matrix:
            alias: test-executor-versions
            parameters:
              executor: [gcp-cli/default, gcp-cli/machine, ubuntu-2204-edge]
              version: [latest, 456.0.0, 460.0.0]
          context: orb-publisher
          filters: *filters

      - install-win:
          matrix:
            alias: test-win-executor-versions
            parameters:
              executor: [windows-2019, windows-2022]
              version: [latest, 456.0.0, 460.0.0]
          context: orb-publisher
          filters: *filters

      - install-alpine:
          matrix:
            alias: test-alpine-versions
            parameters:
              version: [latest, 370.0.0, 410.0.0]
          context: orb-publisher
          filters: *filters

      - install-google:
          matrix:
            alias: test-google-versions
            parameters:
              version: [latest, 456.0.0, 410.0.0]
          context: orb-publisher
          filters: *filters

      - auth-oidc:
          matrix:
            alias: test-auth-oidc
            parameters:
              executor: [gcp-cli/default, gcp-cli/machine, ubuntu-2204-edge, windows-2019, windows-2022]
          context:
            - cpe-gcp

      - install-components:
          matrix:
            alias: test-install-components
            parameters:
              executor: [gcp-cli/default, gcp-cli/machine, ubuntu-2204-edge, windows-2019, windows-2022]
          context:
            - cpe-gcp

      - orb-tools/pack:
          filters: *filters

      - orb-tools/publish:
          orb-name: circleci/gcp-cli
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires:
            - test-executor-versions
            - test-win-executor-versions
            - test-google-versions
            - test-alpine-versions
            - test-install-components
            - test-auth-oidc
            - orb-tools/pack
          context: orb-publisher
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
